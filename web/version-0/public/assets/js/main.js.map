{"version":3,"sources":["00inputs.js","01collapsables.js","02palette.js","03photo.js","04localStorage.js","05form.js","06fetch.js","09main.js"],"names":[],"mappingsvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["'use strict';\r\nconst inputsTextConfig = [\r\n  {\r\n    inputClass: '.js-name',\r\n    cardClass: '.js-namePreview',\r\n    defaultValue: 'Nombre Apellido',\r\n    cardPrefix: '',\r\n    cardElementAttribute: 'innerHTML',\r\n  },\r\n  {\r\n    inputClass: '.js-position',\r\n    cardClass: '.js-positionPreview',\r\n    defaultValue: 'Front-end developer',\r\n    cardPrefix: '',\r\n    cardElementAttribute: 'innerHTML',\r\n  },\r\n\r\n  {\r\n    inputClass: '.js-email',\r\n    cardClass: '.js-emailPreview',\r\n    defaultValue: '',\r\n    cardPrefix: 'mailto:',\r\n    cardElementAttribute: 'href',\r\n  },\r\n  {\r\n    inputClass: '.js-phone',\r\n    cardClass: '.js-phonePreview',\r\n    defaultValue: '',\r\n    cardPrefix: 'tel:',\r\n    cardElementAttribute: 'href',\r\n  },\r\n  {\r\n    inputClass: '.js-linkedin',\r\n    cardClass: '.js-linkedinPreview',\r\n    defaultValue: '',\r\n    cardPrefix: 'https://www.linkedin.com/in/',\r\n    cardElementAttribute: 'href',\r\n  },\r\n  {\r\n    inputClass: '.js-github',\r\n    cardClass: '.js-githubPreview',\r\n    defaultValue: '',\r\n    cardPrefix: 'https://github.com/',\r\n    cardElementAttribute: 'href',\r\n  },\r\n];\r\n\r\nfunction updateAllInputs() {\r\n  // recorro los 6 inputs del array inputsTextConfig\r\n  for (const inputTextConfig of inputsTextConfig) {\r\n    // por cada objeto del array inputsTextConfig hago:\r\n    console.log(\r\n      'Empiezo una nueva iteración del for con la configuración del elemento:',\r\n      inputTextConfig\r\n    );\r\n    // obtengo el elemento input, el origen\r\n    const inputElement = document.querySelector(inputTextConfig.inputClass);\r\n    console.log(\r\n      'Elemento del formulario:',\r\n      inputTextConfig.inputClass,\r\n      inputElement\r\n    );\r\n    // obtengo el elemento de la card, el destino\r\n    const cardElement = document.querySelector(inputTextConfig.cardClass);\r\n    console.log(\r\n      'Elemento del la tarjeta:',\r\n      inputTextConfig.cardClass,\r\n      cardElement\r\n    );\r\n    // obtengo el valor del input\r\n    let newValue = inputElement.value;\r\n\r\n    // compruebo si tengo que usar el innerHTML, es decir si es el nombre o la profesion\r\n    if (inputTextConfig.cardElementAttribute === 'innerHTML') {\r\n      // compruebo si está vacío\r\n      if (inputElement.value === '') {\r\n        newValue = inputTextConfig.defaultValue;\r\n      } else {\r\n        newValue = inputElement.value;\r\n      }\r\n      console.log('Valor por defecto:', inputTextConfig.defaultValue);\r\n      console.log('Nuevo valor a poner en la tarjeta:', newValue);\r\n      // actualizo la tarjeta\r\n      cardElement.innerHTML = newValue;\r\n    }\r\n    // si no es de tipo innerHTML, compruebo si tengo que usar el href, es decir si es el email, phone, linkedin o gihtub\r\n    else if (inputTextConfig.cardElementAttribute === 'href') {\r\n      // compruebo si está vacío\r\n      if (inputElement.value === '') {\r\n        newValue = '#';\r\n      } else {\r\n        // limpio el prefijo por si acaso la usuaria ha escrito cosas como:\r\n        // - https://github.com/migueldelmazo en vez de migueldelmazo a secas\r\n        // - https://www.linkedin.com/in/migueldelmazo en vez de migueldelmazo a secas\r\n        newValue = newValue.replace(inputTextConfig.cardPrefix, '');\r\n        // vuelvo a añadir el prefijo https://www.linkedin.com/in/\r\n        newValue = inputTextConfig.cardPrefix + newValue;\r\n      }\r\n      console.log('Valor del prefijo:', inputTextConfig.cardPrefix);\r\n      console.log('Nuevo valor a poner en la tarjeta:', newValue);\r\n      // actualizo la tarjeta\r\n      cardElement.href = newValue;\r\n    }\r\n    console.log('-------------------------------------------------');\r\n  }\r\n  // después de cualquier acción del usuario guardo en el local storage\r\n  saveInLocalStorage();\r\n}\r\n\r\n// obtengo los 6 inputs del html\r\nconst inputTextElements = document.querySelectorAll('.js-inputText');\r\n// escucho a cada uno de ellos con un addEventListener\r\nfor (const inputTextElement of inputTextElements) {\r\n  inputTextElement.addEventListener('keyup', updateAllInputs);\r\n}\r\n\r\n// al arrancar la página proceso todos los inputs\r\n// como updateAllInputs no recibe eventos puedo ejecutar esta función al inicio, tras un evento de usuaria o cuando me de la real gana!!!\r\n\r\n","'use strict';\r\n\r\nconst collapsable1 = document.querySelector('.js-slide1');\r\nconst collapsable2 = document.querySelector('.js-slide2');\r\nconst collapsable3 = document.querySelector('.js-slide3');\r\n\r\nconst designElement = document.querySelector('.js-design');\r\nconst fillElement = document.querySelector('.js-fill');\r\nconst shareElement = document.querySelector('.js-share');\r\n\r\nfunction handleShow1() {\r\n  collapsable1.classList.toggle('collapsable--close');\r\n}\r\nfunction handleShow2() {\r\n  collapsable2.classList.toggle('collapsable--open');\r\n}\r\nfunction handleShow3() {\r\n  collapsable3.classList.toggle('collapsable--open');\r\n}\r\n\r\ndesignElement.addEventListener('click', handleShow1);\r\nfillElement.addEventListener('click', handleShow2);\r\nshareElement.addEventListener('click', handleShow3);\r\n","'use strict';\r\n\r\nconst paletteElements = document.querySelectorAll('.js-palette');\r\nconst cardElement = document.querySelector('.js-card');\r\nlet checkedPalette = 1;\r\n\r\nfunction updatePalette() {\r\n  cardElement.classList.remove('palette1', 'palette2', 'palette3', 'palette4');\r\n  const checkedPaletteElement = document.querySelector('.js-palette:checked');\r\n  checkedPalette = checkedPaletteElement.value;\r\n  cardElement.classList.add('palette' + checkedPalette);\r\n  // después de cualquier acción del usuario guardo en el local storage\r\n  saveInLocalStorage();\r\n}\r\n\r\nfor (const paletteElement of paletteElements) {\r\n  paletteElement.addEventListener('change', updatePalette);\r\n}\r\n","'use strict';\r\n\r\nconst fr = new FileReader();\r\nconst uploadBtn = document.querySelector('.js-profileTrigger');\r\nconst fileField = document.querySelector('.js-profileUploadBtn');\r\nconst profileImage = document.querySelector('.js-profileImage');\r\nconst profilePreview = document.querySelector('.js-profilePreview');\r\nlet photo = '';\r\n/**\r\n * Recoge el archivo añadido al campo de tipo \"file\"\r\n * y lo carga en nuestro objeto FileReader para que\r\n * lo convierta a algo con lo que podamos trabajar.\r\n * Añade un listener al FR para que ejecute una función\r\n * al tener los datos listos\r\n * @param {evento} e\r\n */\r\nfunction getImage(e) {\r\n  const myFile = e.currentTarget.files[0];\r\n  fr.addEventListener('load', writeImage);\r\n  fr.readAsDataURL(myFile);\r\n}\r\n/**\r\n * Una vez tenemos los datos listos en el FR podemos\r\n * trabajar con ellos ;)\r\n */\r\nfunction writeImage() {\r\n  /* En la propiedad `result` de nuestro FR se almacena\r\n   * el resultado. Ese resultado de procesar el fichero que hemos cargado\r\n   * podemos pasarlo como background a la imagen de perfil y a la vista previa\r\n   * de nuestro componente.\r\n   */\r\n  photo = fr.result;\r\n  updatePhoto();\r\n  // después de cualquier acción del usuario guardo en el local storage\r\n  saveInLocalStorage();\r\n}\r\n\r\nconst defaultPhoto = document.querySelector('.sample__photo');\r\n\r\nfunction updatePhoto() {\r\n  const currentPhoto = photo || `url(${defaultPhoto.style.backgroundImage}`;\r\n  profilePreview.style.backgroundImage = `url(${currentPhoto})`;\r\n  profileImage.style.backgroundImage = `url(${currentPhoto})`;\r\n}\r\n\r\n/*   console.log(fr.result);\r\n  profilePreview.style.backgroundImage = `url(${fr.result})`;\r\n  profileImage.style.backgroundImage = `url(${fr.result})`;\r\n */\r\n\r\n/**\r\n * Genera un click automático en nuesto campo de tipo \"file\"\r\n * que está oculto\r\n */\r\nfunction fakeFileClick() {\r\n  fileField.click();\r\n}\r\n\r\n/**\r\n * Añadimos los listeners necesarios:\r\n * - al botón visible para generar el click automático\r\n * - al campo oculto para cuando cambie su value\r\n */\r\nuploadBtn.addEventListener('click', fakeFileClick);\r\nfileField.addEventListener('change', getImage);\r\n","'use strict';\r\nconst resetButtonElement = document.querySelector('.js-reset');\r\n\r\nfunction resetInfo() {\r\n  localStorage.clear();\r\n}\r\nresetButtonElement.addEventListener('click', resetInfo);\r\n\r\n/*\r\n\r\nCómo vamos a usar siempre el local storage:\r\n\r\nGuardar en el local storage:\r\n- Cuando la usuaria haga cualquier cambio en la página que queramos guardar en el local storage llamamos a la función saveInLocalStorage\r\n- 1º En ella obtenemos todos los datos a guardar\r\n- 2º Los metemos en un objeto\r\n- 3º Hacemos JSON.stringify\r\n- 4º Hacemos localStorage.setItem(...)\r\n\r\nRecuperar del local storage:\r\n- Cuando arrancamos la página recuperamos los datos del local storage, para ello\r\n- 1º Obtenemos los datos con localStorage.getItem(...)\r\n- 2º Comprobamos si son datos válidos, diferente de null. Si no son datos válidos no hacemos nada más\r\n- 3º Si son datos válidos los colocamos donde corresponda, en una variable global, en los campos de formulario con .value o donde sea.\r\n- 4º En este proyecto en concreto los ponemos en el formulario\r\n- 5º Llamamos a las funciones que replican los datos desde el formulario a la tarjeta\r\n\r\n*/\r\n\r\n// cuando la usuaria cambia cualquier cosa en el formulario debemos llamar a esta función\r\nfunction getUserData() {\r\n  // obtengo los valores de todos los campos\r\n  return {\r\n    photo: photo,\r\n    palette: parseInt(document.querySelector('.js-palette:checked').value),\r\n    name: document.querySelector('.js-inputName').value,\r\n    job: document.querySelector('.js-inputJob').value,\r\n    email: document.querySelector('.js-inputEmail').value,\r\n    phone: document.querySelector('.js-inputPhone').value,\r\n    linkedin: document.querySelector('.js-inputLinkedin').value,\r\n    github: document.querySelector('.js-inputGithub').value,\r\n  };\r\n}\r\n// cuando la usuaria cambia cualquier cosa en el formulario debemos llamar a esta función\r\nfunction saveInLocalStorage() {\r\n  // obtengo los valores de todos los campos\r\n  const userData = getUserData();\r\n  // lo convierto a string porque local storage solo admite strings\r\n  const userDataInString = JSON.stringify(userData);\r\n  // lo guardo en el local storage en el campo que me apetece\r\n  localStorage.setItem('userData', userDataInString);\r\n}\r\n// al arrancar la página recogemos los datos desde el local storage y actualizamos el formulario\r\nfunction getFromLocalStorage() {\r\n  // obtengo los datos desde el local storage\r\n  const userDataInString = localStorage.getItem('userData');\r\n  // compruebo si hay datos válidos, es decir si la usuaria ya había entrado en nuestra web anteriormente\r\n  if (userDataInString !== null) {\r\n    const userData = JSON.parse(userDataInString);\r\n    // actualizo los inputs del formulario\r\n    document.querySelector('.js-inputName').value = userData.name;\r\n    document.querySelector('.js-inputJob').value = userData.job;\r\n    document.querySelector('.js-inputEmail').value = userData.email;\r\n    document.querySelector('.js-inputPhone').value = userData.phone;\r\n    document.querySelector('.js-inputLinkedin').value = userData.linkedin;\r\n    document.querySelector('.js-inputGithub').value = userData.github;\r\n    // actualizo la variable global de la foto\r\n    photo = userData.photo;\r\n    // actualizo la paleta, para ello\r\n    // - Recorro las 3 paletas\r\n    // - Compruebo cuál tiene el valor que tengo en el local storage\r\n    // - A la paleta que tiene el valor correcto le hago un .checked = true para activarla\r\n    const paletteElements = document.querySelectorAll('.js-palette');\r\n    for (const paletteElement of paletteElements) {\r\n      if (paletteElement.value === userData.palette) {\r\n        paletteElement.checked = true;\r\n      }\r\n    }\r\n    // propago los datos desde el formulario a la tarjeta\r\n    updateAllInputs();\r\n    updatePalette();\r\n    updatePhoto();\r\n  }\r\n}\r\n\r\n/*\r\n\r\nPara actualizar la paleta hay otras dos formas de hacerlo:\r\n\r\n1º Le pongo a cada radio button de las paletas la clase .palette-1, .palette-2 y .palette-3 y ejecuto\r\ndocument.querySelector(`.js-palette-${userData.palette}`).checked = true;\r\n\r\n2º Hasta ahora hemos utilizado selectores de id, etiqueta y clase para seleccionar elementos\r\nHay más formas de hacerlo por ejemplo si pongo: document.querySelector('.js-palette[value=\"2\"]')\r\nestoy seleccionando el elemento que tiene la clase .js-palette y que además tiene un atributo que se llama\r\nvalue y que tiene el valor 2.\r\n\r\nPor ello en la función getFromLocalStorage podría haber usado :\r\ndocument.querySelector(`.js-palette[value=\"${userData.palette}\"]`).checked = true;\r\n\r\nMás info de selectores de atributos: https://developer.mozilla.org/es/docs/Web/CSS/Selectores_atributo\r\n\r\n*/\r\n","'use strict';\r\n\r\n// prevenimos el envío del formulario\r\n\r\nconst form = document.querySelector('.js-form');\r\n\r\nfunction handleSubmit(ev) {\r\n  ev.preventDefault();\r\n}\r\n\r\nform.addEventListener('submit', handleSubmit);\r\n\r\n// prevenimos la apertura de ventana al pulsar intro (keyCode=13)\r\nfunction handle13Keydown(ev) {\r\n  var keyCode = ev.which;\r\n  if (keyCode === 13) {\r\n    ev.preventDefault();\r\n    return false;\r\n  }\r\n}\r\nform.addEventListener('keydown', handle13Keydown);\r\n","'use strict';\r\n\r\nconst createBtn = document.querySelector('.js-create-btn');\r\nconst cardResultElement = document.querySelector('.js-card-result');\r\nconst createdSection = document.querySelector('.js-created');\r\nconst errorElement = document.querySelector('.js-consoleError');\r\nconst errorSection = document.querySelector('.js-error');\r\n\r\nfunction handleCreateBtn(ev) {\r\n  ev.preventDefault();\r\n\r\n  console.log('Mis datos', getUserData());\r\n\r\n  const url = 'https://profileawesome.herokuapp.com/card';\r\n  const data = getUserData();\r\n\r\n  fetch(url, {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log('Server response:', data);\r\n      if (data.success === true) {\r\n        cardResultElement.innerHTML = data.cardURL;\r\n        cardResultElement.href = data.cardURL;\r\n        createdSection.classList.remove('created--hidden');\r\n        errorSection.classList.add('created--hidden');\r\n      } else {\r\n        errorElement.innerHTML = data.error;\r\n        errorSection.classList.remove('created--hidden');\r\n        createdSection.classList.add('created--hidden');\r\n      }\r\n    });\r\n}\r\n\r\ncreateBtn.addEventListener('click', handleCreateBtn);\r\n","// recuperamos la info desde el local storage\r\ngetFromLocalStorage();\r\n\r\n// arrancamos la página\r\n\r\nupdateAllInputs();\r\nupdatePalette();\r\nupdatePhoto();\r\n"]}